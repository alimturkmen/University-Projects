EXPLANATION OF THE ALGORITHM

-Process struct
I used a struct, Process, by that way I think my design became neat. Each process has the same properties with different values. Each has a name, an instruction set and an arrival time. Although I didn't need the line number of the last executed instruction as it is stated in the project description I also defined a field variable for the line number. Since we execute instructions one by one, I thought queue would be a good data structure for instruction set. The instruction set is stored in a queue of pairs where each instruction is represented by a pair. First item of the pair is the name of the process and the second one is the time required to execute the process. There is no need to store the line number.  

-Reading the files
First part of main function is designed for reading the process file and the instruction files. As I mentioned in comments, I thought "description" file as a waiting queue. This time  they are waiting for the arrival time. Hence, I take the processes and put them into a queue. As time elapses processes will pop out from the queue. The instruction set of the processes are also assigned in this part. 

-Time variables
There are two variables in the project in order to measure time: 'time' and 'time2'. 'time' keeps elapsing as the CPU executes instructions whereas 'time2' stops when the process gets the CPU. Thus, 'time-time2' gives the amount of time the CPU executes that process.

-Writing the queue
We need to show the current status of the process queue(procQue) and waiting queues(sQueues). In order to record this status I created a function called "writeQueue" which takes a process queue and the time then stores the names of the processes in the queue in a string with required format. When a process gets the CPU or goes to a waiting queue or pops out from waiting queue this function is called in order to update the output files.

-Cache variables
In order to keep track of the cache contents there are two int variables are used: cache1 and cache2. As new blocks arrive these variables are updated. cache1 stores the most recently used block. 

-Main loop
In the main loop of the project, in each turn the elements of the procQueue are written into the string, outputFile. "io" variable becomes false by default which predicts the process won't be sent to a any queue. If it is goes to a waiting queue then io changes. Then 'time2' is assigned to 'time' which implies that new process starts being executed. 'time' will increase during the process's execution. The CPU will keep handling the instructions in the quantum time interval. Until 'time-time2' ,in other words execution time of the process, becomes greater than or equal to quantum time, the CPU will be busy with that process. If any process arrives to the CPU in this time interval, they will be added to the queue. If the following instruction wants to use printer then it is sent to the regarding queue. This condition is checked with the first letter of the instruction. If so, then the process is sent to the printer queue. The time and the execution time of the instruction are stored in ptQueue0 and ptQueue1. Boolean variable io becomes true and the loop is broken since we need to switch the process. If the instruction is reading memory, then the block number that is wanted to read is checked whether it is in cache or not. (Again the instruction is detected with its first letter.) If it is in cache then there is no problem just updates the cache. Otherwise the block number is pushed to the blockQueue in order to update cache later. When the executed instruction neither dispm nor readm, then instructions are executed in the quantum time. After the execution of the instruction, if a process in any queue completes its job or any process arrives to the CPU it is pushed to the ready queue of the CPU. If memory reading is done, then the cache is updated. The corresponding block is stored in blockQueue, it is popped out and cache1 and cache2 contents are changed. When a process from waiting queues pops out then the other process gets IO. It is time is set to current time as it is arrived the IO now.
After the process uses its time quantum or goes to a waiting queue, program checks whether the process is done or not. If it isn't done and it was not sent to a waiting queue, then it is pushed to the end of the queue. The last if statement in the loop is written to handle the idle status of CPU. (Although it is not an expected case.) This loop turns until there is no process left in procQueue.
At the end of the program asked output files are written.

* Compile the code with "g++ -std=c++11 main.cpp -o out" and run with "./out" . Some functions may not run properly otherwise.

